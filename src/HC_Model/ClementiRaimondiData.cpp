#include "discamb/HC_Model/ClementiRaimondiData.h"

#include "discamb/BasicUtilities/constants.h"
#include "discamb/BasicUtilities/string_utilities.h"
#include "discamb/BasicUtilities/on_error.h"

using namespace std;

namespace {       //Z <= 36: Clementi & Raimondi (1963) J. Chem. Phys. 38, 2686
// units - 1/Bohr   Z >  36: Clementi, E. & Roetti, C., Atomic and Nuclear Data Tables 14, 177. (1974)
// Z       1S       2S        2P       3S       3P        4S       3D      4P       5S       4D       5P
    double cr_exponents[][11] =
    {
/* 1 */ {  1.0000 },
/* 2 */ {  1.6875 },
/* 3 */ {  2.6906,  0.6396 },
/* 4 */ {  3.6848,  0.9560 },
/* 5 */ {  4.6795,  1.2881,  1.2107 },
/* 6 */ {  5.6727,  1.6083,  1.5679 },
/* 7 */ {  6.6651,  1.9237,  1.9170 },
/* 8 */ {  7.6579,  2.2458,  2.2266 },
/* 9 */ {  8.6501,  2.5638,  2.5500 },
/* 10 */ {  9.6421,  2.8792,  2.8792 },
/* 11 */ { 10.6259,  3.2857,  3.4009,  0.8358 },
/* 12 */ { 11.6089,  3.6960,  3.9129,  1.1025 },
/* 13 */ { 12.5910,  4.1068,  4.4817,  1.3724,  1.3552 },
/* 14 */ { 13.5745,  4.5100,  4.9725,  1.6344,  1.4284 },
/* 15 */ { 14.5578,  4.9125,  5.4806,  1.8806,  1.6288 },
/* 16 */ { 15.5409,  5.3144,  5.9885,  2.1223,  1.8273 },
/* 17 */ { 16.5239,  5.7152,  6.4966,  2.3561,  2.0387 },
/* 18 */ { 17.5075,  6.1152,  7.0041,  2.5856,  2.2547 },
/* 19 */ { 18.4895,  6.5031,  7.5136,  2.8933,  2.5752,  0.8738 },
/* 20 */ { 19.4730,  6.8882,  8.0207,  3.2005,  2.8861,  1.0995 },
/* 21 */ { 20.4566,  7.2868,  8.5273,  3.4466,  3.1354,  1.1581,  2.3733 },
/* 22 */ { 21.4409,  7.6883,  9.0324,  3.6777,  3.3679,  1.2042,  2.7138 },
/* 23 */ { 22.4256,  8.0907,  9.5364,  3.9031,  3.5950,  1.2453,  2.9943 },
/* 24 */ { 23.4138,  8.4919, 10.0376,  4.1226,  3.8220,  1.2833,  3.2522 },
/* 25 */ { 24.3957,  8.8969, 10.5420,  4.3393,  4.0364,  1.3208,  3.5094 },
/* 26 */ { 25.3810,  9.2995, 11.0444,  4.5587,  4.2593,  1.3585,  3.7266 },
/* 27 */ { 26.3668,  9.7025, 11.5462,  4.7741,  4.4782,  1.3941,  3.9518 },
/* 28 */ { 27.3526, 10.1063, 12.0476,  4.9870,  4.6950,  1.4277,  4.1765 },
/* 29 */ { 28.3386, 10.5099, 12.5485,  5.1981,  4.9102,  1.4606,  4.4002 },
/* 30 */ { 29.3245, 10.9140, 13.0490,  5.4064,  5.1231,  1.4913,  4.6261 },
/* 31 */ { 30.3094, 11.2995, 13.5454,  5.6654,  5.4012,  1.7667,  5.0311,  1.5554 },
/* 32 */ { 31.2937, 11.6824, 14.0411,  5.9299,  5.6712,  2.0109,  5.4171,  1.6951 },
/* 33 */ { 32.2783, 12.0635, 14.5368,  6.1985,  5.9499,  2.2360,  5.7928,  1.8623 },
/* 34 */ { 33.2622, 12.4442, 15.0326,  6.4678,  6.2350,  2.4394,  6.1590,  2.0718 },
/* 35 */ { 34.2471, 12.8217, 15.5282,  6.7395,  6.5236,  2.6382,  6.5197,  2.2570 },
/* 36 */ { 35.2316, 13.1990, 16.0235,  7.0109,  6.8114,  2.8289,  6.8753,  2.4423 },
/* 37 */ { 36.2073, 13.5791, 16.5192,  7.2818,  7.1012,  3.0964,  7.2264,  2.7200,  1.0069 },
/* 38 */ { 37.1904, 13.9505, 17.0150,  7.5544,  7.3892,  3.3614,  7.5753,  2.9830,  1.2135 },
/* 39 */ { 38.1747, 14.3111, 17.5012,  7.8499,  7.6975,  3.5655,  8.4655,  3.1864,  1.2511,  3.9892 },
/* 40 */ { 39.1597, 14.6922, 18.0028,  8.1140,  7.9688,  3.7450,  8.5033,  3.3575,  1.3021,  3.2483 },
/* 41 */ { 40.1438, 15.0704, 18.5010,  8.3852,  8.2498,  3.9419,  8.7737,  3.5661,  1.3512,  3.0705 },
/* 42 */ { 41.1271, 15.4459, 18.9959,  8.6560,  8.5327,  4.1361,  9.1025,  3.7513,  1.4092,  3.1050 },
/* 43 */ { 42.1104, 15.8206, 19.4891,  8.9260,  8.8160,  4.3245,  9.4468,  3.9507,  1.4593,  3.2166 },
/* 44 */ { 43.0934, 16.1950, 19.9822,  9.1971,  9.1007,  4.5114,  9.7947,  4.1379,  1.5055,  3.3436 },
/* 45 */ { 44.0769, 16.5712, 20.4752,  9.4698,  9.3822,  4.6906, 10.1457,  4.3210,  1.5436,  3.4908 },
/* 46 */ { 45.0594, 16.9437, 20.9678,  9.7377,  9.6655,  4.8702, 10.4976,  4.5008,  0.0000,  3.6460 },
/* 47 */ { 46.0424, 17.3179, 21.4607, 10.0080,  9.9482,  5.0463, 10.8499,  4.6781,  1.6064,  3.8059 },
/* 48 */ { 47.0254, 17.6925, 21.9539, 10.2787, 10.2304,  5.2193, 11.2024,  4.8527,  1.6380,  3.9693 },
/* 49 */ { 48.0085, 18.0624, 22.4485, 10.5433, 10.5069,  5.4428, 11.5592,  5.0926,  1.9028,  4.2351,  1.5770 },
/* 50 */ { 48.9914, 18.4311, 22.9423, 10.8070, 10.7846,  5.6643, 11.9137,  5.3154,  2.1251,  4.4925,  1.8192 },
/* 51 */ { 49.9741, 18.7994, 23.4362, 11.0707, 11.0617,  5.8845, 12.2663,  5.5446,  2.3228,  4.7436,  1.9986 },
/* 52 */ { 50.9568, 19.1580, 23.9303, 11.3354, 11.3377,  6.1036, 12.6173,  5.7757,  2.5060,  4.9906,  2.1580 },
/* 53 */ { 51.9390, 19.5343, 24.4235, 11.5974, 11.6142,  6.3224, 12.9668,  6.0069,  2.6790,  5.2336,  2.3220 },
/* 54 */ { 52.9211, 19.9009, 24.9169, 11.8600, 11.8895,  6.5402, 13.3149,  6.2395,  2.8439,  5.4734,  2.4848 },
/* 55 */ { 51.9390, 19.5343, 24.4235, 11.5974, 11.6142,  6.3224, 12.9668,  6.0069,  2.6790,  5.2336,  2.3220 }
    };
// Z       1S       2S        2P       3S       3P        4S       3D      4P       5S       4D       5P

    int nSubShells[] = {1, 1, 2, 2, 3, 3, 3, 3, 3, 3,
                           4, 4, 5, 5, 5, 5, 5, 5, 6, 6,
                           7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                           8, 8, 8, 8, 8, 8, 9, 9, 10, 10,
                           10, 10, 10, 10, 10, 10, 10, 10,
                           11, 11, 11, 11, 11, 11, 11};

    // 1S        2S         2P        3S        3P         4S         3D        4P
                               //   l    0(S) 1(P)  2(D)
                               // n
    int nl_to_column[][3] = /* 0 */{{  -1,  -1,  -1},
                            /* 1 */ {   0,  -1,  -1 },
                            /* 2 */ {   1,   2,  -1 },
                            /* 3 */ {   3,   4,   6 },
                            /* 4 */ {   5,   7,  -1 } };

    int nShells[] = { 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5 };
    int shell[] = { 1, 2, 2, 3, 3, 4, 3, 4, 5, 4, 5 };
    int subShell[] = { 0, 0, 1, 0, 1, 0, 2, 1, 0, 2, 1 };
    int shell_dimensions[][5] = { { 1, 0, 0, 0, 0 },
                                     { 1, 1, 0, 0, 0 },
                                     { 1, 2, 0, 0, 0 },
                                     { 1, 2, 1, 0, 0 },
                                     { 1, 2, 2, 0, 0 },
                                     { 1, 2, 2, 1, 0 },
                                     { 1, 2, 3, 1, 0 },
                                     { 1, 2, 3, 2, 0 },
                                     { 1, 2, 3, 2, 1 },
                                     { 1, 2, 3, 3, 1 },
                                     { 1, 2, 3, 3, 2 } };

}

namespace discamb {

namespace clementi_raimondi {

void getExponents(
    int atomicNumber, 
    std::vector<std::vector<double> > &exponents)
{   
    exponents.clear();

    if(atomicNumber > 55)
    {
        string error_message = string("Too high atomic number ("); 
        error_message += string_utilities::convertToString(atomicNumber);
        error_message += string(") in a request for STO exponents from Clementi - Raimondi data.");
        error_message += string("Max valid atomic number is 36");
        on_error::throwException(error_message, __FILE__, __LINE__);
    }

    int n_subshells = nSubShells[atomicNumber - 1];
    int n_shells = nShells[n_subshells - 1];

    exponents.resize(n_shells);
    for (int i = 0; i < n_shells; i++)
        exponents[i].resize(shell_dimensions[n_subshells - 1][i]);


    for (int i = 0; i < n_subshells; i++)
        exponents[shell[i] - 1][subShell[i]] = constants::Angstrom * cr_exponents[atomicNumber - 1][i];
}

}

} //namespace discamb